version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: seo_geo_user
      POSTGRES_PASSWORD: seo_geo_pass
      POSTGRES_DB: seo_geo_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U seo_geo_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://seo_geo_user:seo_geo_pass@postgres:5432/seo_geo_db
      REDIS_URL: redis://redis:6379/0
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672/
      CELERY_BROKER_URL: amqp://admin:admin123@rabbitmq:5672/
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://seo_geo_user:seo_geo_pass@postgres:5432/seo_geo_db
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: amqp://admin:admin123@rabbitmq:5672/
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: celery -A workers.celery_app worker --loglevel=info

  # Celery Beat (Scheduler)
  beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://seo_geo_user:seo_geo_pass@postgres:5432/seo_geo_db
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: amqp://admin:admin123@rabbitmq:5672/
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: celery -A workers.celery_app beat --loglevel=info

  # Flower (Celery Monitoring)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      CELERY_BROKER_URL: amqp://admin:admin123@rabbitmq:5672/
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    ports:
      - "5555:5555"
    depends_on:
      - rabbitmq
      - redis
    command: celery -A workers.celery_app flower --port=5555

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      VITE_API_BASE_URL: http://backend:8000/v1
      VITE_SSE_URL: http://backend:8000/events
      VITE_WS_URL: ws://backend:8000/ws
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Prevent node_modules from being overwritten
    ports:
      - "3000:80"
    depends_on:
      - backend

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    profiles:
      - production

volumes:
  postgres_data:
  rabbitmq_data:

networks:
  default:
    name: seo-geo-network
